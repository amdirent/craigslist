#!/usr/bin/env ruby

p 'Starting posts qualifier'

require 'bundler'

Bundler.require(:default, :qualifier)

Mail.defaults do
  delivery_method :smtp, { address: 'smtp.gmail.com',
                           port: 587,
                           authentication: 'plain',
                           enable_starttls_auto: true,
                           domain:    ENV['MAIL_DOMAIN'],
                           user_name: ENV['MAIL_USER'],
                           password:  ENV['MAIL_PASS']
                         }
end

pg = PG.connect(host:     ENV['DATABASE_HOST'],
                port:     ENV.fetch('DATABASE_PORT', 5432).to_i,
                dbname:   ENV['DATABASE_NAME'],
                user:     ENV['DATABASE_USER'],
                password: ENV['DATABASE_PASS']
               )

keywords = %w{ ios
               android
               ruby
               rails
               python
               javascript
               app
               web
               application
               api
               rest
               restful
               programmer
               automate
               automation
               unix
               linux
               shell
               script
             }

tsquery = keywords.join(' | ')

potential_leads = pg.exec_params(<<-SQL, [tsquery])
                                   WITH newly_processed AS (UPDATE posts SET processed = true WHERE NOT processed RETURNING *)
                                   SELECT p.id, p.url, p.title, p.body
                                   FROM newly_processed p,
                                        to_tsquery($1) query
                                   WHERE p.body_ts @@ query OR p.title_ts @@ query
                                   ORDER BY ts_rank(title_ts, query, 32) DESC, ts_rank(body_ts, query, 32) DESC
                                 SQL

require 'csv'

csv_data = CSV.generate do |csv|
  csv << ['id', 'url', 'title', 'is_relevant', 'notes']
  potential_leads.each do |post|
    csv << [post['id'], post['url'], post['title'], nil, nil]
  end
end

Mail.deliver do
  to 'crankin@amdirent.com'
  cc 'chall@amdirent.com'
  from 'help@amdirent.com'
  subject "Craigslist Lead Digest for #{Date.today.strftime('%a, %-d %b %Y')}"

  html_part do
    content_type 'text/html; charset=UTF-8'
    body <<-HTML
           <h2>Daily Lead Digest</h2>
           <table>
             <tr>
               <th>Keywords used:</td>
               <td>#{keywords.join(', ')}</td>
             </tr>
           </table>
           <p>Attached CSV contains #{potential_leads.count} leads.  Ordered by search rank, highest first.</p>
         HTML
  end

  add_file filename: 'digest.csv',
           mime_type: 'text/csv',
           content: csv_data
end

p 'Mail sent'
